# Portfolio Optimization Application v1.6
#
# This application performs portfolio optimization using Modern Portfolio Theory (MPT)
# and Monte Carlo simulation to help investors make informed decisions about asset allocation.
# It uses historical data from Yahoo Finance to calculate optimal weights that maximize
# the Sharpe ratio while providing risk metrics and future value projections.

import numpy as np
import pandas as pd
import yfinance as yf
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from scipy.optimize import minimize
from datetime import datetime, timedelta

def get_user_inputs():
    """
    Handles user interaction to collect necessary inputs for portfolio optimization:
    - List of stock tickers to analyze
    - Number of years of historical data to consider
    - Initial investment amount
    
    Includes input validation to ensure data quality and prevent errors.
    """
    print("\n=== Portfolio Optimizer ===")
    print("\nEnter ticker symbols separated by commas")
    print("Example: SPY, GLD, IEF")
    tickers = input("Tickers: ").replace(" ", "").upper().split(",")

    while True:
        try:
            years = int(input("\nYears of historical data (1-10): "))
            if 1 <= years <= 10:
                break
            print("Please enter a number between 1 and 10")
        except ValueError:
            print("Please enter a valid number")

    while True:
        try:
            investment = float(input("\nInitial investment amount ($): "))
            if investment > 0:
                break
            print("Please enter a positive amount")
        except ValueError:
            print("Please enter a valid number")

    return tickers, years, investment

def get_stock_data(tickers, start_date, end_date):
    """
    Fetches historical price data for the specified tickers using Yahoo Finance API.
    Downloads closing prices for each asset within the specified date range.
    Handles potential API errors and missing data gracefully.
    
    Returns a pandas DataFrame with closing prices for all valid tickers.
    """
    data = pd.DataFrame()
    for ticker in tickers:
        try:
            stock = yf.Ticker(ticker)
            hist = stock.history(start=start_date, end=end_date)['Close']
            data[ticker] = hist
        except Exception as e:
            print(f"Error downloading {ticker}: {str(e)}")
    return data

def calculate_portfolio_metrics(weights, returns):
    """
    Calculates key portfolio performance metrics using Modern Portfolio Theory:
    - Expected annual return (annualized mean return)
    - Portfolio risk (annualized standard deviation)
    """
    try:
        portfolio_return = np.sum(returns.mean() * weights) * 252
        portfolio_risk = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))
        return portfolio_return, portfolio_risk
    except Exception as e:
        print(f"Error calculating portfolio metrics: {str(e)}")
        return None, None

def calculate_var(weights, returns, confidence_level=0.95):
    """
    Calculates Value at Risk (VaR) for the portfolio at specified confidence level.
    VaR represents the potential loss that won't be exceeded with the given confidence.
    """
    try:
        clean_returns = returns.dropna()
        if clean_returns.empty:
            raise ValueError("No valid return data available")

        portfolio_returns = np.sum(clean_returns * weights, axis=1)

        if len(portfolio_returns) == 0:
            raise ValueError("No valid portfolio returns calculated")

        var = np.percentile(portfolio_returns, (1 - confidence_level) * 100)
        return -var
    except Exception as e:
        print(f"Error calculating VaR: {str(e)}")
        return None

def monte_carlo_simulation(weights, returns, initial_investment, num_simulations=1000, time_horizon=252):
    """
    Performs Monte Carlo simulation to project possible future portfolio values.
    Uses multivariate normal distribution to generate random returns based on
    historical mean and covariance.
    """
    try:
        clean_returns = returns.dropna()
        if clean_returns.empty:
            raise ValueError("No valid return data available")

        mean_returns = clean_returns.mean()
        cov_matrix = clean_returns.cov()

        simulated_returns = np.random.multivariate_normal(
            mean_returns, cov_matrix, (num_simulations, time_horizon)
        )

        portfolio_values = np.zeros((num_simulations, time_horizon))

        for i in range(num_simulations):
            portfolio_values[i, 0] = initial_investment
            for t in range(1, time_horizon):
                portfolio_return = np.sum(simulated_returns[i, t] * weights)
                portfolio_values[i, t] = portfolio_values[i, t-1] * (1 + portfolio_return)

        return portfolio_values
    except Exception as e:
        print(f"Error in Monte Carlo simulation: {str(e)}")
        return None

def optimize_portfolio(returns, risk_free_rate=0.02):
    """
    Performs portfolio optimization using the Sharpe Ratio as the objective function.
    Uses Sequential Least Squares Programming (SLSQP) to find the optimal weights.
    """
    try:
        num_assets = returns.shape[1]

        def objective(weights):
            portfolio_return, portfolio_risk = calculate_portfolio_metrics(weights, returns)
            if portfolio_return is None or portfolio_risk is None:
                return np.inf
            sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_risk
            return -sharpe_ratio

        constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
        bounds = tuple((0, 1) for asset in range(num_assets))
        initial_weights = np.array([1/num_assets] * num_assets)

        result = minimize(objective, initial_weights, method='SLSQP',
                         bounds=bounds, constraints=constraints)

        return result.x
    except Exception as e:
        print(f"Error optimizing portfolio: {str(e)}")
        return None

def plot_interactive_results(portfolio_simulations, returns, optimal_weights):
    """
    Creates an interactive visualization with three panels:
    1. Efficient Frontier plot showing risk-return tradeoff and optimal portfolio
    2. Distribution of final portfolio values from Monte Carlo simulation
    3. Monte Carlo simulation paths showing possible portfolio value evolution
    """
    num_portfolios = 1000
    returns_array = []
    risk_array = []
    for _ in range(num_portfolios):
        weights = np.random.random(len(returns.columns))
        weights = weights/np.sum(weights)
        portfolio_return, portfolio_risk = calculate_portfolio_metrics(weights, returns)
        returns_array.append(portfolio_return)
        risk_array.append(portfolio_risk)

    fig = make_subplots(rows=3, cols=1, vertical_spacing=0.1)

    fig.add_trace(
        go.Scatter(x=risk_array, y=returns_array, mode='markers',
                  marker=dict(color='blue', size=4, opacity=0.5),
                  name='Possible Portfolios'),
        row=1, col=1
    )

    opt_return, opt_risk = calculate_portfolio_metrics(optimal_weights, returns)
    fig.add_trace(
        go.Scatter(x=[opt_risk], y=[opt_return], mode='markers',
                  marker=dict(color='red', size=10, symbol='star'),
                  name='Optimal Portfolio'),
        row=1, col=1
    )

    final_values = portfolio_simulations[:, -1]
    hist = np.histogram(final_values, bins=50)

    fig.add_trace(
        go.Bar(x=hist[1][:-1], y=hist[0], name="Distribution"),
        row=2, col=1
    )

    fig.add_vline(x=np.percentile(final_values, 5), line_dash="dash",
                  line_color="red", row=2, col=1)

    time_points = np.arange(portfolio_simulations.shape[1])

    for i in range(0, portfolio_simulations.shape[0], 10):
        fig.add_trace(
            go.Scatter(x=time_points, y=portfolio_simulations[i],
                      mode='lines', line=dict(color='blue', width=1.5),
                      opacity=0.1, showlegend=False),
            row=3, col=1
        )

    median_line = np.median(portfolio_simulations, axis=0)
    fig.add_trace(
        go.Scatter(x=time_points, y=median_line, mode='lines',
                  line=dict(color='red', width=2, dash='dash'),
                  name='Median Path'),
        row=3, col=1
    )

    fig.update_layout(
        height=1200,
        hovermode='x unified',
        title_text="Portfolio Analysis",
        showlegend=True
    )

    fig.update_xaxes(title_text="Risk (Standard Deviation)", row=1, col=1)
    fig.update_yaxes(title_text="Expected Return", row=1, col=1)

    fig.update_xaxes(title_text="Portfolio Value ($) After 1 Year", row=2, col=1)
    fig.update_yaxes(title_text="Frequency", row=2, col=1)

    fig.update_xaxes(title_text="Trading Days", row=3, col=1)
    fig.update_yaxes(title_text="Portfolio Value ($)", row=3, col=1)

    return fig

def save_results(filename, results_text):
    """
    Saves the analysis results to a text file for future reference.
    """
    try:
        with open(filename, 'w') as f:
            f.write(results_text)
        return True
    except Exception as e:
        print(f"Error saving results: {str(e)}")
        return False

def main():
    """
    Main function that orchestrates the portfolio optimization process:
    1. Collects user inputs
    2. Fetches and processes historical data
    3. Performs optimization and risk analysis
    4. Runs Monte Carlo simulation
    5. Generates visualizations
    6. Outputs and optionally saves results
    """
    print("\nWelcome to the Portfolio Optimizer!")

    tickers, years, investment = get_user_inputs()
    end_date = datetime.now()
    start_date = end_date - timedelta(days=years*365)

    print("\nFetching market data...")
    data = get_stock_data(tickers, start_date, end_date)
    valid_tickers = data.columns.tolist()

    if len(valid_tickers) < 2:
        print("Error: Need at least 2 valid tickers for optimization")
        return

    print(f"\nAnalyzing {len(valid_tickers)} assets...")

    returns = data.pct_change().dropna()
    optimal_weights = optimize_portfolio(returns)

    results_text = ""

    if optimal_weights is not None:
        opt_return, opt_risk = calculate_portfolio_metrics(optimal_weights, returns)
        var_95 = calculate_var(optimal_weights, returns, 0.95)
        var_99 = calculate_var(optimal_weights, returns, 0.99)
        portfolio_simulations = monte_carlo_simulation(optimal_weights, returns, investment)

        if portfolio_simulations is not None:
            fig = plot_interactive_results(portfolio_simulations, returns, optimal_weights)
            fig.show()

            final_values = portfolio_simulations[:, -1]

            results_text += "=== Portfolio Analysis Results ===\n\n"
            results_text += "Optimal Portfolio Allocation:\n"
            for ticker, weight in zip(valid_tickers, optimal_weights):
                line = f"{ticker}: {weight*100:.2f}%\n"
                results_text += line
                print(line.strip())

            if opt_return is not None and opt_risk is not None:
                results_text += f"\nRisk Metrics:\n"
                results_text += f"Expected Annual Return: {opt_return*100:.2f}%\n"
                results_text += f"Annual Risk: {opt_risk*100:.2f}%\n"
                results_text += f"Sharpe Ratio: {opt_return/opt_risk:.2f}\n"

                print(f"\nRisk Metrics:")
                print(f"Expected Annual Return: {opt_return*100:.2f}%")
                print(f"Annual Risk: {opt_risk*100:.2f}%")
                print(f"Sharpe Ratio: {opt_return/opt_risk:.2f}")

            if var_95 is not None and var_99 is not None:
                results_text += f"95% Value at Risk: {var_95*100:.2f}%\n"
                results_text += f"99% Value at Risk: {var_99*100:.2f}%\n"

                print(f"95% Value at Risk: {var_95*100:.2f}%")
                print(f"99% Value at Risk: {var_99*100:.2f}%")

            results_text += f"\nMonte Carlo Simulation Results:\n"
            results_text += f"5th Percentile Portfolio Value: ${np.percentile(final_values, 5):,.2f}\n"
            results_text += f"Median Portfolio Value: ${np.median(final_values):,.2f}\n"
            results_text += f"95th Percentile Portfolio Value: ${np.percentile(final_values, 95):,.2f}\n"

            print("\nMonte Carlo Simulation Results:")
            print(f"5th Percentile Portfolio Value: ${np.percentile(final_values, 5):,.2f}")
            print(f"Median Portfolio Value: ${np.median(final_values):,.2f}")
            print(f"95th Percentile Portfolio Value: ${np.percentile(final_values, 95):,.2f}")

            save = input("\nWould you like to save the results? (y/n): ").lower()
            if save == 'y':
                filename = f"portfolio_analysis_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
                if save_results(filename, results_text):
                    print(f"\nResults saved to {filename}")
                else:
                    print("\nFailed to save results")
        else:
            print("Monte Carlo simulation failed")
    else:
        print("Portfolio optimization failed")

if __name__ == "__main__":
    main()
